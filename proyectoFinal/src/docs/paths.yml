paths: 
  /api/carts:
    post:
      tags:
        - Carts
      summary: Creación de nuevo carrito en base de datos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carts/CreateCart'
      responses:
        '200':
          description: Se registró un nuevo carrito.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Carts/CreateCart'
        '500':
          description: Error creando el carrito.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
    get:
      tags:
        - Carts
      summary: Se obtienen todos los carritos en la base de datos.
      responses:
        '200':
          description: Se obtuvieron todos los carritos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carts/GetAllCarts'
        '500':
          description: Error obteniendo los carritos.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
  /api/carts/{id}:  
    delete:
      tags: 
        - Carts
      summary: Se elimina el carrito indicado de la base de datos.
      parameters:
        - in: path
          name: id
          required: true
          description: String id required
          schema: 
            type: string
      responses:
        '200':
          description: Se eliminó el carrito solicitado.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Carts/DeleteCart'
        '500':
          description: Error eliminando el carrito.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
    put:
      tags:
        - Carts
      summary: Se actualiza el producto y la cantidad de unidades en el carrito de la base de datos.
      parameters:
        - in: path
          name: id
          required: true
          description: String id required
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carts/UpdateProd'
      responses:
        '200':
          description: Se modificó el carrito solicitado.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Carts/UpdateProd'
        '500':
          description: Error modificando el carrito.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
    get:
      tags:
        - Carts
      summary: Se obtiene el carrito con el id solicitado de la base de datos.
      parameters:
        - in: path
          name: id
          required: true
          description: String id required
          schema: 
            type: string
      responses:
        '200':
          description: Se modificó el carrito solicitado.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Carts/GetCartById'
        '500':
          description: Error modificando el carrito.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
  /api/carts/{idCart}/product/{idProd}:
    post:
      tags: 
        - Carts
      summary: Se agrega una unidad del producto solicitado al carrito indicado de la base de datos.
      parameters:
        - in: path
          name: idCart
          required: true
          description: String id required
          schema: 
            type: string
        - in: path
          name: idProd
          required: true
          description: String id required
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/parameters/schemas/Carts/AddProductInCart'
      responses:
        '200':
          description: Se eliminó el carrito solicitado.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Carts/AddProductInCart'
        '500':
          description: Error eliminando el carrito.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
    put:
      tags: 
        - Carts
      summary: Se agrega una unidad del producto solicitado al carrito indicado de la base de datos.
      parameters:
        - in: path
          name: idCart
          required: true
          description: String id required
          schema: 
            type: string
        - in: path
          name: idProd
          required: true
          description: String id required
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/parameters/schemas/Carts/UpdateQuantityinProd'
      responses:
        '200':
          description: Se eliminó el carrito solicitado.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Carts/UpdateQuantityinProd'
        '500':
          description: Error eliminando el carrito.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
    delete: 
      tags: 
        - Carts
      summary: Se quita una unidad del producto solicitado al carrito indicado de la base de datos.
      parameters:
        - in: path
          name: idCart
          required: true
          description: String id required
          schema: 
            type: string
        - in: path
          name: idProd
          required: true
          description: String id required
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/parameters/schemas/Carts/DeleteProdInCart'
      responses:
        '200':
          description: Se eliminó el carrito solicitado.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Carts/DeleteProdInCart'
        '500':
          description: Error eliminando el carrito.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ServerError'
  /api/products/{id}:
    delete:
      tags: 
        - Products
      summary: Se elimina el producto indicado de la base de datos.
      parameters:
        - in: path
          name: id
          required: true
          description: String id required
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/parameters/schemas/Products/DeleteId'
      responses:
        '200':
          description: Se obtuvo el listado de productos.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Products/DeleteId'
        '404':
          description: Error interno del servidor.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/NotFound'
    put:
      tags: 
        - Products
      summary: Se modifica el producto indicado de la base de datos.
      parameters:
        - in: path
          name: id
          required: true
          description: String id required
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/parameters/schemas/Products/UpdateData'
      responses:
        '200':
          description: Se obtuvo el listado de productos.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Products/UpdateData'
        '404':
          description: Error interno del servidor.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/NotFound'
  /api/products:
    get:
      tags:
        - Products
      summary: Se obtiene un listado de productos de la base de datos.
      responses:
        '200':
          description: Se obtuvo el listado de productos.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Products/GetAllProducts'
        '404':
          description: Error interno del servidor.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/NotFound'
    post:
      tags:
        - Products
      summary: Se crea un nuevo producto en la base de datos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products/CreateProducts'
      responses:
        '200':
          description: Se obtuvo el listado de productos.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Products/CreateProducts'
        '404':
          description: Error interno del servidor.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/NotFound'
  /ticket:
    post:
      tags:
        - Ticket
      summary: Se crea un nuevo ticket en la base de datos
      parameters:
        - in: path
          name: cartId
          required: true
          description: Id del carrito a buscar
          schema:
            type: string
      responses:
        '200':
          description: Se obtuvo el ticket de compra
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        '500':
          description: Error interno del servidor.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/NotFound'
  /api/users/register:
    post:
      tags:
        - users
      summary: Registro de nuevo usuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/parameters/schemas/NewUser'
      responses:
        200:
          description: Registro exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schema/users/PostUser'
        404: 
          description: Error en validación del body
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ValidationSchemaError'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/NotFound'
  /api/users/login:
    post:
      tags:
        - users
      summary: Login de usuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/parameters/schemas/LoginUser'
      responses:
        200:
          description: El usuario se logueó correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schema/users/LoginUser'
        401:
          description: Usuario no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ErrorUnauthorized'
        404: 
          description: Error en validación del body
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ValidationSchemaError'
  /api/users/getAllUsers:
    get:
      tags:
        - users
      summary: Se obtienen todos los usuarios
      responses:
        200:
          description: Lista de usuario registrados
          content:
            application/json:
              schema:
                $ref: '#/components/schema/users/GetAllUsers'
        401:
          description: Usuario no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ErrorUnauthorized'
        404: 
          description: Error en validación del body
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ValidationSchemaError'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/NotFound'
      security:
        - BearerAuth: []
  /api/users/deleteUsers:
    delete:
      tags:
        - users
      summary: Elimiar usuarios inactivos
      responses:
        200:
          description: Se eliminaron los usuarios inactivos
          content:
            application/json:
              schema:
                $ref: '#/components/schema/users/GetAllUsers'
        401:
          description: Usuario no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ErrorUnauthorized'
        404: 
          description: Error en validación del body
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ValidationSchemaError'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/NotFound'
      security:
        - BearerAuth: []
  /api/users/profile:
    get:
      tags:
      - users
      summary: Perfil del usuario
      responses:
        200:
          description: Datos del perfil de usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schema/users/ProfileUser'
        401:
          description: Usuario no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/errors/ErrorUnauthorized'